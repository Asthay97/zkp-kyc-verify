/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { AlgorandClientInterface } from '@algorandfoundation/algokit-utils/types/algorand-client-interface'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'
import SimulateResponse = modelsv2.SimulateResponse

export const APP_SPEC: Arc56Contract = {"name":"AlgoDID","desc":"","methods":[{"name":"startUpload","desc":"Allocate boxes to begin data upload process","args":[{"name":"pubKey","type":"address","desc":"The pubkey of the DID"},{"name":"numBoxes","type":"uint64","desc":"The number of boxes that the data will take up"},{"name":"endBoxSize","type":"uint64","desc":"The size of the last box"},{"name":"mbrPayment","type":"pay","desc":"Payment from the uploader to cover the box MBR"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}},{"name":"upload","desc":"Upload data to a specific offset in a box","args":[{"name":"pubKey","type":"address","desc":"The pubkey of the DID"},{"name":"boxIndex","type":"uint64","desc":"The index of the box to upload the given chunk of data to"},{"name":"offset","type":"uint64","desc":"The offset within the box to start writing the data"},{"name":"data","type":"byte[]","desc":"The data to write"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}},{"name":"finishUpload","desc":"Mark uploading as false","args":[{"name":"pubKey","type":"address","desc":"The address of the DID"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}},{"name":"startDelete","desc":"Starts the deletion process for the data associated with a DID","args":[{"name":"pubKey","type":"address","desc":"The address of the DID"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}},{"name":"deleteData","desc":"Deletes a box of data","args":[{"name":"pubKey","type":"address","desc":"The address of the DID"},{"name":"boxIndex","type":"uint64","desc":"The index of the box to delete"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}},{"name":"updateApplication","desc":"Allow the contract to be updated by the creator","args":[],"returns":{"type":"void"},"actions":{"create":[],"call":["UpdateApplication"]}},{"name":"dummy","desc":"Dummy function to add extra box references for deleteData.\nBoxes are 32k, but a single app call can only include enough references to read/write 8k\nat a time. Thus when a box is deleted, we need to add additional dummy calls with box\nreferences to increase the total read/write budget to 32k.","args":[],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}},{"name":"createApplication","args":[],"returns":{"type":"void"},"actions":{"create":["NoOp"],"call":[]}}],"arcs":[4,56],"structs":{"Metadata":[{"name":"start","type":"uint64"},{"name":"end","type":"uint64"},{"name":"status","type":"uint8"},{"name":"endSize","type":"uint64"},{"name":"lastDeleted","type":"uint64"}]},"state":{"schema":{"global":{"bytes":0,"ints":1},"local":{"bytes":0,"ints":0}},"keys":{"global":{"currentIndex":{"key":"Y3VycmVudEluZGV4","keyType":"AVMBytes","valueType":"uint64"}},"local":{},"box":{}},"maps":{"global":{},"local":{},"box":{"dataBoxes":{"keyType":"uint64","valueType":"AVMBytes"},"metadata":{"keyType":"address","valueType":"Metadata"}}}},"bareActions":{"create":[],"call":[]},"sourceInfo":{"approval":{"sourceInfo":[{"teal":1,"source":"contracts\\algo-did.algo.ts:39","pc":[0]},{"teal":2,"source":"contracts\\algo-did.algo.ts:39","pc":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]},{"teal":3,"source":"contracts\\algo-did.algo.ts:39","pc":[16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31]},{"teal":15,"source":"contracts\\algo-did.algo.ts:39","pc":[32,33]},{"teal":16,"source":"contracts\\algo-did.algo.ts:39","pc":[34]},{"teal":17,"source":"contracts\\algo-did.algo.ts:39","pc":[35,36]},{"teal":18,"source":"contracts\\algo-did.algo.ts:39","pc":[37]},{"teal":19,"source":"contracts\\algo-did.algo.ts:39","pc":[38,39]},{"teal":20,"source":"contracts\\algo-did.algo.ts:39","pc":[40]},{"teal":21,"source":"contracts\\algo-did.algo.ts:39","pc":[41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66]},{"teal":25,"source":"contracts\\algo-did.algo.ts:39","errorMessage":"The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?","pc":[67]},{"teal":30,"source":"contracts\\algo-did.algo.ts:62","pc":[68,69]},{"teal":31,"source":"contracts\\algo-did.algo.ts:62","pc":[70]},{"teal":32,"source":"contracts\\algo-did.algo.ts:62","pc":[71]},{"teal":33,"source":"contracts\\algo-did.algo.ts:62","pc":[72]},{"teal":34,"source":"contracts\\algo-did.algo.ts:62","pc":[73,74]},{"teal":35,"source":"contracts\\algo-did.algo.ts:62","pc":[75]},{"teal":36,"source":"contracts\\algo-did.algo.ts:62","pc":[76]},{"teal":39,"source":"contracts\\algo-did.algo.ts:62","errorMessage":"argument 0 (mbrPayment) for startUpload must be a pay transaction","pc":[77]},{"teal":42,"source":"contracts\\algo-did.algo.ts:61","pc":[78,79,80]},{"teal":43,"source":"contracts\\algo-did.algo.ts:61","pc":[81]},{"teal":46,"source":"contracts\\algo-did.algo.ts:60","pc":[82,83,84]},{"teal":47,"source":"contracts\\algo-did.algo.ts:60","pc":[85]},{"teal":50,"source":"contracts\\algo-did.algo.ts:59","pc":[86,87,88]},{"teal":51,"source":"contracts\\algo-did.algo.ts:59","pc":[89]},{"teal":52,"source":"contracts\\algo-did.algo.ts:59","pc":[90]},{"teal":53,"source":"contracts\\algo-did.algo.ts:59","pc":[91,92]},{"teal":54,"source":"contracts\\algo-did.algo.ts:59","pc":[93]},{"teal":57,"source":"contracts\\algo-did.algo.ts:59","errorMessage":"argument 3 (pubKey) for startUpload must be a address","pc":[94]},{"teal":60,"source":"contracts\\algo-did.algo.ts:58","pc":[95,96,97]},{"teal":61,"source":"contracts\\algo-did.algo.ts:58","pc":[98]},{"teal":62,"source":"contracts\\algo-did.algo.ts:58","pc":[99]},{"teal":74,"source":"contracts\\algo-did.algo.ts:58","pc":[100,101,102]},{"teal":77,"source":"contracts\\algo-did.algo.ts:58","pc":[103]},{"teal":78,"source":"contracts\\algo-did.algo.ts:58","pc":[104,105]},{"teal":82,"source":"contracts\\algo-did.algo.ts:64","pc":[106,107]},{"teal":83,"source":"contracts\\algo-did.algo.ts:64","pc":[108,109]},{"teal":84,"source":"contracts\\algo-did.algo.ts:64","pc":[110]},{"teal":85,"source":"contracts\\algo-did.algo.ts:64","pc":[111]},{"teal":89,"source":"contracts\\algo-did.algo.ts:66","pc":[112]},{"teal":90,"source":"contracts\\algo-did.algo.ts:66","pc":[113]},{"teal":91,"source":"contracts\\algo-did.algo.ts:66","pc":[114,115]},{"teal":95,"source":"contracts\\algo-did.algo.ts:67","pc":[116,117]},{"teal":96,"source":"contracts\\algo-did.algo.ts:67","pc":[118,119]},{"teal":97,"source":"contracts\\algo-did.algo.ts:67","pc":[120]},{"teal":98,"source":"contracts\\algo-did.algo.ts:67","pc":[121]},{"teal":99,"source":"contracts\\algo-did.algo.ts:67","pc":[122]},{"teal":100,"source":"contracts\\algo-did.algo.ts:67","pc":[123,124]},{"teal":110,"source":"contracts\\algo-did.algo.ts:70","pc":[125,126]},{"teal":111,"source":"contracts\\algo-did.algo.ts:70","pc":[127]},{"teal":112,"source":"contracts\\algo-did.algo.ts:71","pc":[128,129]},{"teal":113,"source":"contracts\\algo-did.algo.ts:71","pc":[130]},{"teal":114,"source":"contracts\\algo-did.algo.ts:71","pc":[131]},{"teal":115,"source":"contracts\\algo-did.algo.ts:72","pc":[132,133,134]},{"teal":116,"source":"contracts\\algo-did.algo.ts:72","pc":[135]},{"teal":117,"source":"contracts\\algo-did.algo.ts:73","pc":[136,137]},{"teal":118,"source":"contracts\\algo-did.algo.ts:73","pc":[138]},{"teal":119,"source":"contracts\\algo-did.algo.ts:73","pc":[139]},{"teal":120,"source":"contracts\\algo-did.algo.ts:74","pc":[140,141,142,143,144,145,146,147,148,149]},{"teal":121,"source":"contracts\\algo-did.algo.ts:74","pc":[150]},{"teal":122,"source":"contracts\\algo-did.algo.ts:69","pc":[151,152]},{"teal":126,"source":"contracts\\algo-did.algo.ts:77","pc":[153,154]},{"teal":127,"source":"contracts\\algo-did.algo.ts:77","pc":[155]},{"teal":128,"source":"contracts\\algo-did.algo.ts:77","pc":[156]},{"teal":129,"source":"contracts\\algo-did.algo.ts:77","pc":[157]},{"teal":130,"source":"contracts\\algo-did.algo.ts:77","pc":[158]},{"teal":131,"source":"contracts\\algo-did.algo.ts:77","pc":[159]},{"teal":135,"source":"contracts\\algo-did.algo.ts:79","pc":[160,161]},{"teal":136,"source":"contracts\\algo-did.algo.ts:79","pc":[162,163]},{"teal":137,"source":"contracts\\algo-did.algo.ts:79","pc":[164]},{"teal":141,"source":"contracts\\algo-did.algo.ts:81","pc":[165]},{"teal":142,"source":"contracts\\algo-did.algo.ts:81","pc":[166,167]},{"teal":143,"source":"contracts\\algo-did.algo.ts:81","pc":[168]},{"teal":144,"source":"contracts\\algo-did.algo.ts:81","pc":[169]},{"teal":145,"source":"contracts\\algo-did.algo.ts:81","pc":[170]},{"teal":154,"source":"contracts\\algo-did.algo.ts:83","pc":[171,172]},{"teal":155,"source":"contracts\\algo-did.algo.ts:83","pc":[173,174]},{"teal":156,"source":"contracts\\algo-did.algo.ts:83","pc":[175]},{"teal":157,"source":"contracts\\algo-did.algo.ts:84","pc":[176,177]},{"teal":158,"source":"contracts\\algo-did.algo.ts:84","pc":[178]},{"teal":159,"source":"contracts\\algo-did.algo.ts:84","pc":[179]},{"teal":160,"source":"contracts\\algo-did.algo.ts:84","pc":[180,181]},{"teal":161,"source":"contracts\\algo-did.algo.ts:84","pc":[182]},{"teal":162,"source":"contracts\\algo-did.algo.ts:84","pc":[183,184]},{"teal":163,"source":"contracts\\algo-did.algo.ts:84","pc":[185]},{"teal":164,"source":"contracts\\algo-did.algo.ts:83","pc":[186]},{"teal":165,"source":"contracts\\algo-did.algo.ts:85","pc":[187,188]},{"teal":166,"source":"contracts\\algo-did.algo.ts:85","pc":[189]},{"teal":167,"source":"contracts\\algo-did.algo.ts:85","pc":[190]},{"teal":168,"source":"contracts\\algo-did.algo.ts:85","pc":[191,192]},{"teal":169,"source":"contracts\\algo-did.algo.ts:85","pc":[193]},{"teal":170,"source":"contracts\\algo-did.algo.ts:84","pc":[194]},{"teal":171,"source":"contracts\\algo-did.algo.ts:86","pc":[195,196]},{"teal":172,"source":"contracts\\algo-did.algo.ts:86","pc":[197,198]},{"teal":173,"source":"contracts\\algo-did.algo.ts:86","pc":[199]},{"teal":174,"source":"contracts\\algo-did.algo.ts:85","pc":[200]},{"teal":175,"source":"contracts\\algo-did.algo.ts:87","pc":[201,202]},{"teal":176,"source":"contracts\\algo-did.algo.ts:86","pc":[203]},{"teal":177,"source":"contracts\\algo-did.algo.ts:88","pc":[204,205,206,207]},{"teal":178,"source":"contracts\\algo-did.algo.ts:87","pc":[208]},{"teal":179,"source":"contracts\\algo-did.algo.ts:83","pc":[209,210]},{"teal":183,"source":"contracts\\algo-did.algo.ts:90","pc":[211,212]},{"teal":184,"source":"contracts\\algo-did.algo.ts:90","pc":[213,214]},{"teal":185,"source":"contracts\\algo-did.algo.ts:90","pc":[215,216]},{"teal":186,"source":"contracts\\algo-did.algo.ts:90","pc":[217]},{"teal":187,"source":"contracts\\algo-did.algo.ts:90","pc":[218]},{"teal":191,"source":"contracts\\algo-did.algo.ts:91","pc":[219,220]},{"teal":192,"source":"contracts\\algo-did.algo.ts:91","pc":[221,222]},{"teal":193,"source":"contracts\\algo-did.algo.ts:91","pc":[223,224]},{"teal":194,"source":"contracts\\algo-did.algo.ts:91","pc":[225]},{"teal":195,"source":"contracts\\algo-did.algo.ts:91","pc":[226]},{"teal":196,"source":"contracts\\algo-did.algo.ts:58","pc":[227]},{"teal":201,"source":"contracts\\algo-did.algo.ts:103","pc":[228,229,230]},{"teal":202,"source":"contracts\\algo-did.algo.ts:103","pc":[231,232,233]},{"teal":205,"source":"contracts\\algo-did.algo.ts:103","pc":[234,235,236]},{"teal":206,"source":"contracts\\algo-did.algo.ts:103","pc":[237]},{"teal":209,"source":"contracts\\algo-did.algo.ts:103","pc":[238,239,240]},{"teal":210,"source":"contracts\\algo-did.algo.ts:103","pc":[241]},{"teal":213,"source":"contracts\\algo-did.algo.ts:103","pc":[242,243,244]},{"teal":214,"source":"contracts\\algo-did.algo.ts:103","pc":[245]},{"teal":215,"source":"contracts\\algo-did.algo.ts:103","pc":[246]},{"teal":216,"source":"contracts\\algo-did.algo.ts:103","pc":[247,248]},{"teal":217,"source":"contracts\\algo-did.algo.ts:103","pc":[249]},{"teal":220,"source":"contracts\\algo-did.algo.ts:103","errorMessage":"argument 3 (pubKey) for upload must be a address","pc":[250]},{"teal":223,"source":"contracts\\algo-did.algo.ts:103","pc":[251,252,253]},{"teal":224,"source":"contracts\\algo-did.algo.ts:103","pc":[254]},{"teal":225,"source":"contracts\\algo-did.algo.ts:103","pc":[255]},{"teal":237,"source":"contracts\\algo-did.algo.ts:103","pc":[256,257,258]},{"teal":240,"source":"contracts\\algo-did.algo.ts:103","pc":[259]},{"teal":244,"source":"contracts\\algo-did.algo.ts:104","pc":[260,261]},{"teal":245,"source":"contracts\\algo-did.algo.ts:104","pc":[262,263]},{"teal":246,"source":"contracts\\algo-did.algo.ts:104","pc":[264]},{"teal":247,"source":"contracts\\algo-did.algo.ts:104","pc":[265]},{"teal":251,"source":"contracts\\algo-did.algo.ts:106","pc":[266,267]},{"teal":252,"source":"contracts\\algo-did.algo.ts:106","pc":[268,269]},{"teal":256,"source":"contracts\\algo-did.algo.ts:106","pc":[270,271]},{"teal":257,"source":"contracts\\algo-did.algo.ts:106","pc":[272]},{"teal":258,"source":"contracts\\algo-did.algo.ts:106","pc":[273]},{"teal":259,"source":"contracts\\algo-did.algo.ts:106","pc":[274]},{"teal":260,"source":"contracts\\algo-did.algo.ts:107","pc":[275]},{"teal":261,"source":"contracts\\algo-did.algo.ts:107","pc":[276]},{"teal":262,"source":"contracts\\algo-did.algo.ts:107","pc":[277]},{"teal":263,"source":"contracts\\algo-did.algo.ts:107","pc":[278]},{"teal":267,"source":"contracts\\algo-did.algo.ts:106","pc":[279,280]},{"teal":268,"source":"contracts\\algo-did.algo.ts:106","pc":[281]},{"teal":269,"source":"contracts\\algo-did.algo.ts:106","pc":[282]},{"teal":270,"source":"contracts\\algo-did.algo.ts:106","pc":[283]},{"teal":271,"source":"contracts\\algo-did.algo.ts:108","pc":[284]},{"teal":272,"source":"contracts\\algo-did.algo.ts:108","pc":[285,286]},{"teal":273,"source":"contracts\\algo-did.algo.ts:108","pc":[287]},{"teal":274,"source":"contracts\\algo-did.algo.ts:108","pc":[288]},{"teal":275,"source":"contracts\\algo-did.algo.ts:108","pc":[289,290,291]},{"teal":276,"source":"contracts\\algo-did.algo.ts:108","pc":[292,293]},{"teal":277,"source":"contracts\\algo-did.algo.ts:106","pc":[294,295]},{"teal":278,"source":"contracts\\algo-did.algo.ts:106","pc":[296]},{"teal":279,"source":"contracts\\algo-did.algo.ts:106","pc":[297]},{"teal":280,"source":"contracts\\algo-did.algo.ts:106","pc":[298]},{"teal":281,"source":"contracts\\algo-did.algo.ts:108","pc":[299]},{"teal":282,"source":"contracts\\algo-did.algo.ts:108","pc":[300]},{"teal":283,"source":"contracts\\algo-did.algo.ts:108","pc":[301]},{"teal":286,"source":"contracts\\algo-did.algo.ts:108","pc":[302]},{"teal":291,"source":"contracts\\algo-did.algo.ts:110","pc":[303,304]},{"teal":292,"source":"contracts\\algo-did.algo.ts:110","pc":[305]},{"teal":293,"source":"contracts\\algo-did.algo.ts:110","pc":[306]},{"teal":294,"source":"contracts\\algo-did.algo.ts:110","pc":[307,308,309]},{"teal":301,"source":"contracts\\algo-did.algo.ts:111","pc":[310,311]},{"teal":302,"source":"contracts\\algo-did.algo.ts:111","pc":[312]},{"teal":303,"source":"contracts\\algo-did.algo.ts:112","pc":[313,314]},{"teal":304,"source":"contracts\\algo-did.algo.ts:106","pc":[315,316]},{"teal":305,"source":"contracts\\algo-did.algo.ts:106","pc":[317]},{"teal":306,"source":"contracts\\algo-did.algo.ts:106","pc":[318]},{"teal":307,"source":"contracts\\algo-did.algo.ts:106","pc":[319]},{"teal":308,"source":"contracts\\algo-did.algo.ts:112","pc":[320]},{"teal":309,"source":"contracts\\algo-did.algo.ts:112","pc":[321]},{"teal":310,"source":"contracts\\algo-did.algo.ts:112","pc":[322,323,324]},{"teal":311,"source":"contracts\\algo-did.algo.ts:106","pc":[325,326]},{"teal":312,"source":"contracts\\algo-did.algo.ts:106","pc":[327,328]},{"teal":313,"source":"contracts\\algo-did.algo.ts:106","pc":[329]},{"teal":314,"source":"contracts\\algo-did.algo.ts:106","pc":[330]},{"teal":315,"source":"contracts\\algo-did.algo.ts:112","pc":[331]},{"teal":316,"source":"contracts\\algo-did.algo.ts:112","pc":[332,333,334]},{"teal":319,"source":"contracts\\algo-did.algo.ts:112","pc":[335,336]},{"teal":322,"source":"contracts\\algo-did.algo.ts:111","pc":[337]},{"teal":323,"source":"contracts\\algo-did.algo.ts:111","pc":[338]},{"teal":328,"source":"contracts\\algo-did.algo.ts:116","pc":[339,340]},{"teal":329,"source":"contracts\\algo-did.algo.ts:116","pc":[341]},{"teal":330,"source":"contracts\\algo-did.algo.ts:116","pc":[342,343]},{"teal":331,"source":"contracts\\algo-did.algo.ts:116","pc":[344,345]},{"teal":332,"source":"contracts\\algo-did.algo.ts:116","pc":[346]},{"teal":333,"source":"contracts\\algo-did.algo.ts:103","pc":[347]},{"teal":338,"source":"contracts\\algo-did.algo.ts:125","pc":[348,349,350]},{"teal":339,"source":"contracts\\algo-did.algo.ts:125","pc":[351]},{"teal":340,"source":"contracts\\algo-did.algo.ts:125","pc":[352]},{"teal":341,"source":"contracts\\algo-did.algo.ts:125","pc":[353,354]},{"teal":342,"source":"contracts\\algo-did.algo.ts:125","pc":[355]},{"teal":345,"source":"contracts\\algo-did.algo.ts:125","errorMessage":"argument 0 (pubKey) for finishUpload must be a address","pc":[356]},{"teal":348,"source":"contracts\\algo-did.algo.ts:125","pc":[357,358,359]},{"teal":349,"source":"contracts\\algo-did.algo.ts:125","pc":[360]},{"teal":350,"source":"contracts\\algo-did.algo.ts:125","pc":[361]},{"teal":359,"source":"contracts\\algo-did.algo.ts:125","pc":[362,363,364]},{"teal":363,"source":"contracts\\algo-did.algo.ts:126","pc":[365,366]},{"teal":364,"source":"contracts\\algo-did.algo.ts:126","pc":[367,368]},{"teal":365,"source":"contracts\\algo-did.algo.ts:126","pc":[369]},{"teal":366,"source":"contracts\\algo-did.algo.ts:126","pc":[370]},{"teal":370,"source":"contracts\\algo-did.algo.ts:128","pc":[371,372]},{"teal":371,"source":"contracts\\algo-did.algo.ts:128","pc":[373]},{"teal":372,"source":"contracts\\algo-did.algo.ts:128","pc":[374,375,376]},{"teal":373,"source":"contracts\\algo-did.algo.ts:128","pc":[377]},{"teal":374,"source":"contracts\\algo-did.algo.ts:125","pc":[378]},{"teal":379,"source":"contracts\\algo-did.algo.ts:136","pc":[379,380,381]},{"teal":380,"source":"contracts\\algo-did.algo.ts:136","pc":[382]},{"teal":381,"source":"contracts\\algo-did.algo.ts:136","pc":[383]},{"teal":382,"source":"contracts\\algo-did.algo.ts:136","pc":[384,385]},{"teal":383,"source":"contracts\\algo-did.algo.ts:136","pc":[386]},{"teal":386,"source":"contracts\\algo-did.algo.ts:136","errorMessage":"argument 0 (pubKey) for startDelete must be a address","pc":[387]},{"teal":389,"source":"contracts\\algo-did.algo.ts:136","pc":[388,389,390]},{"teal":390,"source":"contracts\\algo-did.algo.ts:136","pc":[391]},{"teal":391,"source":"contracts\\algo-did.algo.ts:136","pc":[392]},{"teal":399,"source":"contracts\\algo-did.algo.ts:136","pc":[393,394,395]},{"teal":402,"source":"contracts\\algo-did.algo.ts:136","pc":[396]},{"teal":406,"source":"contracts\\algo-did.algo.ts:137","pc":[397,398]},{"teal":407,"source":"contracts\\algo-did.algo.ts:137","pc":[399,400]},{"teal":408,"source":"contracts\\algo-did.algo.ts:137","pc":[401]},{"teal":409,"source":"contracts\\algo-did.algo.ts:137","pc":[402]},{"teal":413,"source":"contracts\\algo-did.algo.ts:139","pc":[403,404]},{"teal":414,"source":"contracts\\algo-did.algo.ts:139","pc":[405,406]},{"teal":418,"source":"contracts\\algo-did.algo.ts:139","pc":[407,408]},{"teal":419,"source":"contracts\\algo-did.algo.ts:139","pc":[409]},{"teal":420,"source":"contracts\\algo-did.algo.ts:139","pc":[410]},{"teal":421,"source":"contracts\\algo-did.algo.ts:139","pc":[411]},{"teal":422,"source":"contracts\\algo-did.algo.ts:140","pc":[412]},{"teal":423,"source":"contracts\\algo-did.algo.ts:140","pc":[413]},{"teal":424,"source":"contracts\\algo-did.algo.ts:140","pc":[414]},{"teal":425,"source":"contracts\\algo-did.algo.ts:140","pc":[415]},{"teal":429,"source":"contracts\\algo-did.algo.ts:139","pc":[416,417]},{"teal":430,"source":"contracts\\algo-did.algo.ts:139","pc":[418]},{"teal":431,"source":"contracts\\algo-did.algo.ts:139","pc":[419,420,421]},{"teal":432,"source":"contracts\\algo-did.algo.ts:139","pc":[422]},{"teal":433,"source":"contracts\\algo-did.algo.ts:136","pc":[423]},{"teal":438,"source":"contracts\\algo-did.algo.ts:151","pc":[424,425,426]},{"teal":439,"source":"contracts\\algo-did.algo.ts:151","pc":[427]},{"teal":442,"source":"contracts\\algo-did.algo.ts:151","pc":[428,429,430]},{"teal":443,"source":"contracts\\algo-did.algo.ts:151","pc":[431]},{"teal":444,"source":"contracts\\algo-did.algo.ts:151","pc":[432]},{"teal":445,"source":"contracts\\algo-did.algo.ts:151","pc":[433,434]},{"teal":446,"source":"contracts\\algo-did.algo.ts:151","pc":[435]},{"teal":449,"source":"contracts\\algo-did.algo.ts:151","errorMessage":"argument 1 (pubKey) for deleteData must be a address","pc":[436]},{"teal":452,"source":"contracts\\algo-did.algo.ts:151","pc":[437,438,439]},{"teal":453,"source":"contracts\\algo-did.algo.ts:151","pc":[440]},{"teal":454,"source":"contracts\\algo-did.algo.ts:151","pc":[441]},{"teal":463,"source":"contracts\\algo-did.algo.ts:151","pc":[442,443,444]},{"teal":466,"source":"contracts\\algo-did.algo.ts:151","pc":[445]},{"teal":467,"source":"contracts\\algo-did.algo.ts:151","pc":[446]},{"teal":471,"source":"contracts\\algo-did.algo.ts:152","pc":[447,448]},{"teal":472,"source":"contracts\\algo-did.algo.ts:152","pc":[449,450]},{"teal":473,"source":"contracts\\algo-did.algo.ts:152","pc":[451]},{"teal":474,"source":"contracts\\algo-did.algo.ts:152","pc":[452]},{"teal":478,"source":"contracts\\algo-did.algo.ts:154","pc":[453,454]},{"teal":479,"source":"contracts\\algo-did.algo.ts:154","pc":[455,456]},{"teal":483,"source":"contracts\\algo-did.algo.ts:154","pc":[457,458]},{"teal":484,"source":"contracts\\algo-did.algo.ts:154","pc":[459]},{"teal":485,"source":"contracts\\algo-did.algo.ts:154","pc":[460]},{"teal":486,"source":"contracts\\algo-did.algo.ts:154","pc":[461]},{"teal":487,"source":"contracts\\algo-did.algo.ts:155","pc":[462]},{"teal":488,"source":"contracts\\algo-did.algo.ts:155","pc":[463,464]},{"teal":489,"source":"contracts\\algo-did.algo.ts:155","pc":[465]},{"teal":490,"source":"contracts\\algo-did.algo.ts:155","pc":[466]},{"teal":494,"source":"contracts\\algo-did.algo.ts:154","pc":[467,468]},{"teal":495,"source":"contracts\\algo-did.algo.ts:154","pc":[469]},{"teal":496,"source":"contracts\\algo-did.algo.ts:154","pc":[470]},{"teal":497,"source":"contracts\\algo-did.algo.ts:154","pc":[471]},{"teal":498,"source":"contracts\\algo-did.algo.ts:156","pc":[472]},{"teal":499,"source":"contracts\\algo-did.algo.ts:156","pc":[473,474]},{"teal":500,"source":"contracts\\algo-did.algo.ts:156","pc":[475]},{"teal":501,"source":"contracts\\algo-did.algo.ts:156","pc":[476]},{"teal":502,"source":"contracts\\algo-did.algo.ts:156","pc":[477,478,479]},{"teal":503,"source":"contracts\\algo-did.algo.ts:156","pc":[480,481]},{"teal":504,"source":"contracts\\algo-did.algo.ts:154","pc":[482,483]},{"teal":505,"source":"contracts\\algo-did.algo.ts:154","pc":[484]},{"teal":506,"source":"contracts\\algo-did.algo.ts:154","pc":[485]},{"teal":507,"source":"contracts\\algo-did.algo.ts:154","pc":[486]},{"teal":508,"source":"contracts\\algo-did.algo.ts:156","pc":[487]},{"teal":509,"source":"contracts\\algo-did.algo.ts:156","pc":[488]},{"teal":510,"source":"contracts\\algo-did.algo.ts:156","pc":[489]},{"teal":513,"source":"contracts\\algo-did.algo.ts:156","pc":[490]},{"teal":518,"source":"contracts\\algo-did.algo.ts:158","pc":[491,492]},{"teal":519,"source":"contracts\\algo-did.algo.ts:154","pc":[493,494]},{"teal":520,"source":"contracts\\algo-did.algo.ts:154","pc":[495]},{"teal":521,"source":"contracts\\algo-did.algo.ts:154","pc":[496]},{"teal":522,"source":"contracts\\algo-did.algo.ts:154","pc":[497]},{"teal":523,"source":"contracts\\algo-did.algo.ts:158","pc":[498]},{"teal":524,"source":"contracts\\algo-did.algo.ts:158","pc":[499]},{"teal":525,"source":"contracts\\algo-did.algo.ts:158","pc":[500,501,502]},{"teal":530,"source":"contracts\\algo-did.algo.ts:154","pc":[503,504]},{"teal":531,"source":"contracts\\algo-did.algo.ts:154","pc":[505,506]},{"teal":532,"source":"contracts\\algo-did.algo.ts:154","pc":[507]},{"teal":533,"source":"contracts\\algo-did.algo.ts:154","pc":[508]},{"teal":534,"source":"contracts\\algo-did.algo.ts:159","pc":[509]},{"teal":535,"source":"contracts\\algo-did.algo.ts:159","pc":[510,511]},{"teal":536,"source":"contracts\\algo-did.algo.ts:159","pc":[512]},{"teal":537,"source":"contracts\\algo-did.algo.ts:159","pc":[513]},{"teal":538,"source":"contracts\\algo-did.algo.ts:159","pc":[514]},{"teal":539,"source":"contracts\\algo-did.algo.ts:159","pc":[515]},{"teal":544,"source":"contracts\\algo-did.algo.ts:162","pc":[516,517]},{"teal":545,"source":"contracts\\algo-did.algo.ts:162","pc":[518,519]},{"teal":546,"source":"contracts\\algo-did.algo.ts:162","pc":[520]},{"teal":547,"source":"contracts\\algo-did.algo.ts:162","pc":[521,522]},{"teal":551,"source":"contracts\\algo-did.algo.ts:164","pc":[523,524]},{"teal":552,"source":"contracts\\algo-did.algo.ts:164","pc":[525]},{"teal":553,"source":"contracts\\algo-did.algo.ts:164","pc":[526]},{"teal":558,"source":"contracts\\algo-did.algo.ts:166","pc":[527,528]},{"teal":559,"source":"contracts\\algo-did.algo.ts:154","pc":[529,530]},{"teal":560,"source":"contracts\\algo-did.algo.ts:154","pc":[531]},{"teal":561,"source":"contracts\\algo-did.algo.ts:154","pc":[532]},{"teal":562,"source":"contracts\\algo-did.algo.ts:154","pc":[533]},{"teal":563,"source":"contracts\\algo-did.algo.ts:166","pc":[534]},{"teal":564,"source":"contracts\\algo-did.algo.ts:166","pc":[535]},{"teal":565,"source":"contracts\\algo-did.algo.ts:166","pc":[536,537,538]},{"teal":570,"source":"contracts\\algo-did.algo.ts:166","pc":[539,540]},{"teal":571,"source":"contracts\\algo-did.algo.ts:166","pc":[541]},{"teal":572,"source":"contracts\\algo-did.algo.ts:166","pc":[542,543,544]},{"teal":577,"source":"contracts\\algo-did.algo.ts:167","pc":[545,546]},{"teal":578,"source":"contracts\\algo-did.algo.ts:167","pc":[547,548]},{"teal":579,"source":"contracts\\algo-did.algo.ts:167","pc":[549]},{"teal":580,"source":"contracts\\algo-did.algo.ts:154","pc":[550,551]},{"teal":581,"source":"contracts\\algo-did.algo.ts:154","pc":[552,553]},{"teal":582,"source":"contracts\\algo-did.algo.ts:154","pc":[554]},{"teal":590,"source":"contracts\\algo-did.algo.ts:169","pc":[555]},{"teal":591,"source":"contracts\\algo-did.algo.ts:169","pc":[556]},{"teal":592,"source":"contracts\\algo-did.algo.ts:169","pc":[557,558]},{"teal":596,"source":"contracts\\algo-did.algo.ts:170","pc":[559,560]},{"teal":597,"source":"contracts\\algo-did.algo.ts:170","pc":[561,562]},{"teal":598,"source":"contracts\\algo-did.algo.ts:170","pc":[563,564]},{"teal":599,"source":"contracts\\algo-did.algo.ts:170","pc":[565]},{"teal":600,"source":"contracts\\algo-did.algo.ts:170","pc":[566]},{"teal":601,"source":"contracts\\algo-did.algo.ts:170","pc":[567,568]},{"teal":605,"source":"contracts\\algo-did.algo.ts:171","pc":[569,570]},{"teal":606,"source":"contracts\\algo-did.algo.ts:171","pc":[571,572]},{"teal":609,"source":"contracts\\algo-did.algo.ts:169","pc":[573]},{"teal":610,"source":"contracts\\algo-did.algo.ts:169","pc":[574,575]},{"teal":613,"source":"contracts\\algo-did.algo.ts:169","pc":[576]},{"teal":614,"source":"contracts\\algo-did.algo.ts:151","pc":[577]},{"teal":619,"source":"contracts\\algo-did.algo.ts:178","pc":[578,579,580]},{"teal":620,"source":"contracts\\algo-did.algo.ts:178","pc":[581]},{"teal":621,"source":"contracts\\algo-did.algo.ts:178","pc":[582]},{"teal":627,"source":"contracts\\algo-did.algo.ts:178","pc":[583,584,585]},{"teal":631,"source":"contracts\\algo-did.algo.ts:179","pc":[586,587]},{"teal":632,"source":"contracts\\algo-did.algo.ts:179","pc":[588,589]},{"teal":633,"source":"contracts\\algo-did.algo.ts:179","pc":[590]},{"teal":634,"source":"contracts\\algo-did.algo.ts:179","pc":[591]},{"teal":635,"source":"contracts\\algo-did.algo.ts:178","pc":[592]},{"teal":640,"source":"contracts\\algo-did.algo.ts:188","pc":[593,594,595]},{"teal":641,"source":"contracts\\algo-did.algo.ts:188","pc":[596]},{"teal":642,"source":"contracts\\algo-did.algo.ts:188","pc":[597]},{"teal":651,"source":"contracts\\algo-did.algo.ts:188","pc":[598,599,600]},{"teal":652,"source":"contracts\\algo-did.algo.ts:188","pc":[601]},{"teal":655,"source":"contracts\\algo-did.algo.ts:39","pc":[602]},{"teal":656,"source":"contracts\\algo-did.algo.ts:39","pc":[603]},{"teal":659,"source":"contracts\\algo-did.algo.ts:39","pc":[604,605,606,607,608,609]},{"teal":660,"source":"contracts\\algo-did.algo.ts:39","pc":[610,611,612]},{"teal":661,"source":"contracts\\algo-did.algo.ts:39","pc":[613,614,615,616]},{"teal":664,"source":"contracts\\algo-did.algo.ts:39","errorMessage":"this contract does not implement the given ABI method for create NoOp","pc":[617]},{"teal":667,"source":"contracts\\algo-did.algo.ts:39","pc":[618,619,620,621,622,623]},{"teal":668,"source":"contracts\\algo-did.algo.ts:39","pc":[624,625,626,627,628,629]},{"teal":669,"source":"contracts\\algo-did.algo.ts:39","pc":[630,631,632,633,634,635]},{"teal":670,"source":"contracts\\algo-did.algo.ts:39","pc":[636,637,638,639,640,641]},{"teal":671,"source":"contracts\\algo-did.algo.ts:39","pc":[642,643,644,645,646,647]},{"teal":672,"source":"contracts\\algo-did.algo.ts:39","pc":[648,649,650,651,652,653]},{"teal":673,"source":"contracts\\algo-did.algo.ts:39","pc":[654,655,656]},{"teal":674,"source":"contracts\\algo-did.algo.ts:39","pc":[657,658,659,660,661,662,663,664,665,666,667,668,669,670]},{"teal":677,"source":"contracts\\algo-did.algo.ts:39","errorMessage":"this contract does not implement the given ABI method for call NoOp","pc":[671]},{"teal":680,"source":"contracts\\algo-did.algo.ts:39","pc":[672,673,674,675,676,677]},{"teal":681,"source":"contracts\\algo-did.algo.ts:39","pc":[678,679,680]},{"teal":682,"source":"contracts\\algo-did.algo.ts:39","pc":[681,682,683,684]},{"teal":685,"source":"contracts\\algo-did.algo.ts:39","errorMessage":"this contract does not implement the given ABI method for call UpdateApplication","pc":[685]}],"pcOffsetMethod":"none"},"clear":{"sourceInfo":[],"pcOffsetMethod":"none"}},"source":{"approval":"","clear":"I3ByYWdtYSB2ZXJzaW9uIDEw"},"byteCode":{"approval":"CiAJAQgAECCQA8QTgIACGSYCAAxjdXJyZW50SW5kZXgxGBSBBgsxGQiNDAInAAAAAAAAAl0AAAIZAAAAAAAAAAAAAAAxFiIJSTgQIhJENhoDFzYaAhc2GgFJFSEEEkSIAAIiQ4oEAChHAzEAMgkSRClkjACLAIv+CCIJjAGLABaLARZQgAEAUIv9FlCACAAAAAAAAAAAUIwCi/+9TEgURIv/iwK/KYsBIghni/4hBguL/iIJIQcLIQULCIv+IwshBQsIi/0hBQsIIQYIgZDLAQiMA4v8OAiLAxJEi/w4BzIKEkSJNhoEVwIANhoDFzYaAhc2GgFJFSEEEkSIAAIiQ4oEACgxADIJEkSL/4wAi/8lIroXJBJEi/8kI7oXi/4OSUEACov+i/8jI7oXDhBEi/0kEkEAHYv+Fov+i/8jI7oXEkEACov/gREjuhdCAAIhB7lIi/4Wi/2L/LuJNhoBSRUhBBJEiAACIkOKAQAxADIJEkSL/yWAAQG7iTYaAUkVIQQSRIgAAiJDigEAKDEAMgkSRIv/jACL/yUiuhciEkSLACWAAQK7iTYaAhc2GgFJFSEEEkSIAAIiQ4oCAChJMQAyCRJEi/+MAIv/JSK6F4ECEkSL/yQjuheL/g5JQQAKi/6L/yMjuhcOEESL/ov/JCO6FxNBAA2L/yEII7oXi/4iCRJEMgpzAUiMAYv+FryL/ov/IyO6FxJBAAaL/7xCAAohCIv+FosATgK7sSKyEIsBMgpzAUgJsggxALIHJLIBs4mIAAIiQ4oAADEAMgkSRImIAAIiQ4oAAIkiQ4AEuER7NjYaAI4B//EAgARWXGddgARNscQYgAQOeHJXgAS9LITigARokbqQgASjDOf/NhoAjgb9pf5F/r3+3P8J/7IAgARG92UzNhoAjgH/lQA=","clear":"Cg=="},"compilerInfo":{"compiler":"algod","compilerVersion":{"major":4,"minor":0,"patch":2,"commitHash":"6b940281"}}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


// Type definitions for ARC-56 structs

export type Metadata = {
  start: bigint,
  end: bigint,
  status: number,
  endSize: bigint,
  lastDeleted: bigint
}


/**
 * Converts the ABI tuple representation of a Metadata to the struct representation
 */
export function MetadataFromTuple(abiTuple: [bigint, bigint, number, bigint, bigint]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.Metadata, APP_SPEC.structs) as Metadata
}

/**
 * The argument types for the AlgoDid contract
 */
export type AlgoDidArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'startUpload(address,uint64,uint64,pay)void': {
      /**
       * The pubkey of the DID
       */
      pubKey: string
      /**
       * The number of boxes that the data will take up
       */
      numBoxes: bigint | number
      /**
       * The size of the last box
       */
      endBoxSize: bigint | number
      /**
       * Payment from the uploader to cover the box MBR
       */
      mbrPayment: AppMethodCallTransactionArgument
    }
    'upload(address,uint64,uint64,byte[])void': {
      /**
       * The pubkey of the DID
       */
      pubKey: string
      /**
       * The index of the box to upload the given chunk of data to
       */
      boxIndex: bigint | number
      /**
       * The offset within the box to start writing the data
       */
      offset: bigint | number
      /**
       * The data to write
       */
      data: Uint8Array
    }
    'finishUpload(address)void': {
      /**
       * The address of the DID
       */
      pubKey: string
    }
    'startDelete(address)void': {
      /**
       * The address of the DID
       */
      pubKey: string
    }
    'deleteData(address,uint64)void': {
      /**
       * The address of the DID
       */
      pubKey: string
      /**
       * The index of the box to delete
       */
      boxIndex: bigint | number
    }
    'updateApplication()void': Record<string, never>
    'dummy()void': Record<string, never>
    'createApplication()void': Record<string, never>
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'startUpload(address,uint64,uint64,pay)void': [pubKey: string, numBoxes: bigint | number, endBoxSize: bigint | number, mbrPayment: AppMethodCallTransactionArgument]
    'upload(address,uint64,uint64,byte[])void': [pubKey: string, boxIndex: bigint | number, offset: bigint | number, data: Uint8Array]
    'finishUpload(address)void': [pubKey: string]
    'startDelete(address)void': [pubKey: string]
    'deleteData(address,uint64)void': [pubKey: string, boxIndex: bigint | number]
    'updateApplication()void': []
    'dummy()void': []
    'createApplication()void': []
  }
}

/**
 * The return type for each method
 */
export type AlgoDidReturns = {
  'startUpload(address,uint64,uint64,pay)void': void
  'upload(address,uint64,uint64,byte[])void': void
  'finishUpload(address)void': void
  'startDelete(address)void': void
  'deleteData(address,uint64)void': void
  'updateApplication()void': void
  'dummy()void': void
  'createApplication()void': void
}

/**
 * Defines the types of available calls and state of the AlgoDid smart contract.
 */
export type AlgoDidTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'startUpload(address,uint64,uint64,pay)void' | 'startUpload', {
      argsObj: AlgoDidArgs['obj']['startUpload(address,uint64,uint64,pay)void']
      argsTuple: AlgoDidArgs['tuple']['startUpload(address,uint64,uint64,pay)void']
      returns: AlgoDidReturns['startUpload(address,uint64,uint64,pay)void']
    }>
    & Record<'upload(address,uint64,uint64,byte[])void' | 'upload', {
      argsObj: AlgoDidArgs['obj']['upload(address,uint64,uint64,byte[])void']
      argsTuple: AlgoDidArgs['tuple']['upload(address,uint64,uint64,byte[])void']
      returns: AlgoDidReturns['upload(address,uint64,uint64,byte[])void']
    }>
    & Record<'finishUpload(address)void' | 'finishUpload', {
      argsObj: AlgoDidArgs['obj']['finishUpload(address)void']
      argsTuple: AlgoDidArgs['tuple']['finishUpload(address)void']
      returns: AlgoDidReturns['finishUpload(address)void']
    }>
    & Record<'startDelete(address)void' | 'startDelete', {
      argsObj: AlgoDidArgs['obj']['startDelete(address)void']
      argsTuple: AlgoDidArgs['tuple']['startDelete(address)void']
      returns: AlgoDidReturns['startDelete(address)void']
    }>
    & Record<'deleteData(address,uint64)void' | 'deleteData', {
      argsObj: AlgoDidArgs['obj']['deleteData(address,uint64)void']
      argsTuple: AlgoDidArgs['tuple']['deleteData(address,uint64)void']
      returns: AlgoDidReturns['deleteData(address,uint64)void']
    }>
    & Record<'updateApplication()void' | 'updateApplication', {
      argsObj: AlgoDidArgs['obj']['updateApplication()void']
      argsTuple: AlgoDidArgs['tuple']['updateApplication()void']
      returns: AlgoDidReturns['updateApplication()void']
    }>
    & Record<'dummy()void' | 'dummy', {
      argsObj: AlgoDidArgs['obj']['dummy()void']
      argsTuple: AlgoDidArgs['tuple']['dummy()void']
      returns: AlgoDidReturns['dummy()void']
    }>
    & Record<'createApplication()void' | 'createApplication', {
      argsObj: AlgoDidArgs['obj']['createApplication()void']
      argsTuple: AlgoDidArgs['tuple']['createApplication()void']
      returns: AlgoDidReturns['createApplication()void']
    }>
  /**
   * Defines the shape of the state of the application.
   */
  state: {
    global: {
      keys: {
        currentIndex: bigint
      }
      maps: {}
    }
    box: {
      keys: {}
      maps: {
        dataBoxes: Map<bigint | number, Uint8Array>
        metadata: Map<string, Metadata>
      }
    }
  }
}

/**
 * Defines the possible abi call signatures.
 */
export type AlgoDidSignatures = keyof AlgoDidTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type AlgoDidNonVoidMethodSignatures = keyof AlgoDidTypes['methods'] extends infer T ? T extends keyof AlgoDidTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the AlgoDid smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends AlgoDidSignatures> = AlgoDidTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the AlgoDid smart contract to the method's return type
 */
export type MethodReturn<TSignature extends AlgoDidSignatures> = AlgoDidTypes['methods'][TSignature]['returns']

/**
 * Defines the shape of the keyed global state of the application.
 */
export type GlobalKeysState = AlgoDidTypes['state']['global']['keys']

/**
 * Defines the shape of the keyed box state of the application.
 */
export type BoxKeysState = AlgoDidTypes['state']['box']['keys']


/**
 * Defines supported create method params for this smart contract
 */
export type AlgoDidCreateCallParams =
  | Expand<CallParams<AlgoDidArgs['obj']['createApplication()void'] | AlgoDidArgs['tuple']['createApplication()void']> & {method: 'createApplication'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
  | Expand<CallParams<AlgoDidArgs['obj']['createApplication()void'] | AlgoDidArgs['tuple']['createApplication()void']> & {method: 'createApplication()void'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines supported update method params for this smart contract
 */
export type AlgoDidUpdateCallParams =
  | Expand<CallParams<AlgoDidArgs['obj']['updateApplication()void'] | AlgoDidArgs['tuple']['updateApplication()void']> & {method: 'updateApplication'}>
  | Expand<CallParams<AlgoDidArgs['obj']['updateApplication()void'] | AlgoDidArgs['tuple']['updateApplication()void']> & {method: 'updateApplication()void'}>
/**
 * Defines arguments required for the deploy method.
 */
export type AlgoDidDeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: AlgoDidCreateCallParams
  /**
   * Update transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  updateParams?: AlgoDidUpdateCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the AlgoDid smart contract
 */
export abstract class AlgoDidParamsFactory {
  /**
   * Gets available create ABI call param factories
   */
  static get create() {
    return {
      _resolveByMethod<TParams extends AlgoDidCreateCallParams & {method: string}>(params: TParams) {
        switch(params.method) {
          case 'createApplication':
          case 'createApplication()void':
            return AlgoDidParamsFactory.create.createApplication(params)
        }
        throw new Error(`Unknown ' + verb + ' method`)
      },

      /**
       * Constructs create ABI call params for the AlgoDID smart contract using the createApplication()void ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      createApplication(params: CallParams<AlgoDidArgs['obj']['createApplication()void'] | AlgoDidArgs['tuple']['createApplication()void']> & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC}): AppClientMethodCallParams & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC} {
        return {
          ...params,
          method: 'createApplication()void' as const,
          args: Array.isArray(params.args) ? params.args : [],
        }
      },
    }
  }

  /**
   * Gets available update ABI call param factories
   */
  static get update() {
    return {
      _resolveByMethod<TParams extends AlgoDidUpdateCallParams & {method: string}>(params: TParams) {
        switch(params.method) {
          case 'updateApplication':
          case 'updateApplication()void':
            return AlgoDidParamsFactory.update.updateApplication(params)
        }
        throw new Error(`Unknown ' + verb + ' method`)
      },

      /**
       * Constructs update ABI call params for the AlgoDID smart contract using the updateApplication()void ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      updateApplication(params: CallParams<AlgoDidArgs['obj']['updateApplication()void'] | AlgoDidArgs['tuple']['updateApplication()void']> & AppClientCompilationParams): AppClientMethodCallParams & AppClientCompilationParams {
        return {
          ...params,
          method: 'updateApplication()void' as const,
          args: Array.isArray(params.args) ? params.args : [],
        }
      },
    }
  }

  /**
   * Constructs a no op call for the startUpload(address,uint64,uint64,pay)void ABI method
   *
   * Allocate boxes to begin data upload process
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static startUpload(params: CallParams<AlgoDidArgs['obj']['startUpload(address,uint64,uint64,pay)void'] | AlgoDidArgs['tuple']['startUpload(address,uint64,uint64,pay)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'startUpload(address,uint64,uint64,pay)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.pubKey, params.args.numBoxes, params.args.endBoxSize, params.args.mbrPayment],
    }
  }
  /**
   * Constructs a no op call for the upload(address,uint64,uint64,byte[])void ABI method
   *
   * Upload data to a specific offset in a box
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static upload(params: CallParams<AlgoDidArgs['obj']['upload(address,uint64,uint64,byte[])void'] | AlgoDidArgs['tuple']['upload(address,uint64,uint64,byte[])void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'upload(address,uint64,uint64,byte[])void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.pubKey, params.args.boxIndex, params.args.offset, params.args.data],
    }
  }
  /**
   * Constructs a no op call for the finishUpload(address)void ABI method
   *
   * Mark uploading as false
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static finishUpload(params: CallParams<AlgoDidArgs['obj']['finishUpload(address)void'] | AlgoDidArgs['tuple']['finishUpload(address)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'finishUpload(address)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.pubKey],
    }
  }
  /**
   * Constructs a no op call for the startDelete(address)void ABI method
   *
   * Starts the deletion process for the data associated with a DID
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static startDelete(params: CallParams<AlgoDidArgs['obj']['startDelete(address)void'] | AlgoDidArgs['tuple']['startDelete(address)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'startDelete(address)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.pubKey],
    }
  }
  /**
   * Constructs a no op call for the deleteData(address,uint64)void ABI method
   *
   * Deletes a box of data
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static deleteData(params: CallParams<AlgoDidArgs['obj']['deleteData(address,uint64)void'] | AlgoDidArgs['tuple']['deleteData(address,uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'deleteData(address,uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.pubKey, params.args.boxIndex],
    }
  }
  /**
   * Constructs a no op call for the dummy()void ABI method
   *
  * Dummy function to add extra box references for deleteData.
  Boxes are 32k, but a single app call can only include enough references to read/write 8k
  at a time. Thus when a box is deleted, we need to add additional dummy calls with box
  references to increase the total read/write budget to 32k.

   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static dummy(params: CallParams<AlgoDidArgs['obj']['dummy()void'] | AlgoDidArgs['tuple']['dummy()void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'dummy()void' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the AlgoDID smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class AlgoDidFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `AlgoDidFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClientInterface {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new AlgoDidClient(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new AlgoDidClient(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the AlgoDID smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: AlgoDidDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
      createParams: params.createParams?.method ? AlgoDidParamsFactory.create._resolveByMethod(params.createParams) : params.createParams ? params.createParams as (AlgoDidCreateCallParams & { args: Uint8Array[] }) : undefined,
      updateParams: params.updateParams?.method ? AlgoDidParamsFactory.update._resolveByMethod(params.updateParams) : params.updateParams ? params.updateParams as (AlgoDidUpdateCallParams & { args: Uint8Array[] }) : undefined,
    })
    return { result: result.result, appClient: new AlgoDidClient(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the AlgoDID smart contract using the createApplication()void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create params
       */
      createApplication: (params: CallParams<AlgoDidArgs['obj']['createApplication()void'] | AlgoDidArgs['tuple']['createApplication()void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
        return this.appFactory.params.create(AlgoDidParamsFactory.create.createApplication(params))
      },
    },

    /**
     * Gets available deployUpdate methods
     */
    deployUpdate: {
      /**
       * Updates an existing instance of the AlgoDID smart contract using the updateApplication()void ABI method.
       *
       * Allow the contract to be updated by the creator
       *
       * @param params The params for the smart contract call
       * @returns The deployUpdate params
       */
      updateApplication: (params: CallParams<AlgoDidArgs['obj']['updateApplication()void'] | AlgoDidArgs['tuple']['updateApplication()void']> & AppClientCompilationParams = {args: []}) => {
        return this.appFactory.params.deployUpdate(AlgoDidParamsFactory.update.updateApplication(params))
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the AlgoDID smart contract using the createApplication()void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create transaction
       */
      createApplication: (params: CallParams<AlgoDidArgs['obj']['createApplication()void'] | AlgoDidArgs['tuple']['createApplication()void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
        return this.appFactory.createTransaction.create(AlgoDidParamsFactory.create.createApplication(params))
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the AlgoDID smart contract using an ABI method call using the createApplication()void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create result
       */
      createApplication: async (params: CallParams<AlgoDidArgs['obj']['createApplication()void'] | AlgoDidArgs['tuple']['createApplication()void']> & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
        const result = await this.appFactory.send.create(AlgoDidParamsFactory.create.createApplication(params))
        return { result: { ...result.result, return: result.result.return as unknown as (undefined | AlgoDidReturns['createApplication()void']) }, appClient: new AlgoDidClient(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the AlgoDID smart contract
 */
export class AlgoDidClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `AlgoDidClient`
   *
   * @param appClient An `AppClient` instance which has been created with the AlgoDid app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `AlgoDidClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends AlgoDidNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `AlgoDidClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<AlgoDidClient> {
    return new AlgoDidClient(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `AlgoDidClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<AlgoDidClient> {
    return new AlgoDidClient(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClientInterface {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available update methods
     */
    update: {
      /**
       * Updates an existing instance of the AlgoDID smart contract using the `updateApplication()void` ABI method.
       *
       * Allow the contract to be updated by the creator
       *
       * @param params The params for the smart contract call
       * @returns The update params
       */
      updateApplication: (params: CallParams<AlgoDidArgs['obj']['updateApplication()void'] | AlgoDidArgs['tuple']['updateApplication()void']> & AppClientCompilationParams = {args: []}) => {
        return this.appClient.params.update(AlgoDidParamsFactory.update.updateApplication(params))
      },

    },

    /**
     * Makes a clear_state call to an existing instance of the AlgoDID smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the AlgoDID smart contract using the `startUpload(address,uint64,uint64,pay)void` ABI method.
     *
     * Allocate boxes to begin data upload process
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    startUpload: (params: CallParams<AlgoDidArgs['obj']['startUpload(address,uint64,uint64,pay)void'] | AlgoDidArgs['tuple']['startUpload(address,uint64,uint64,pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(AlgoDidParamsFactory.startUpload(params))
    },

    /**
     * Makes a call to the AlgoDID smart contract using the `upload(address,uint64,uint64,byte[])void` ABI method.
     *
     * Upload data to a specific offset in a box
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    upload: (params: CallParams<AlgoDidArgs['obj']['upload(address,uint64,uint64,byte[])void'] | AlgoDidArgs['tuple']['upload(address,uint64,uint64,byte[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(AlgoDidParamsFactory.upload(params))
    },

    /**
     * Makes a call to the AlgoDID smart contract using the `finishUpload(address)void` ABI method.
     *
     * Mark uploading as false
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    finishUpload: (params: CallParams<AlgoDidArgs['obj']['finishUpload(address)void'] | AlgoDidArgs['tuple']['finishUpload(address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(AlgoDidParamsFactory.finishUpload(params))
    },

    /**
     * Makes a call to the AlgoDID smart contract using the `startDelete(address)void` ABI method.
     *
     * Starts the deletion process for the data associated with a DID
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    startDelete: (params: CallParams<AlgoDidArgs['obj']['startDelete(address)void'] | AlgoDidArgs['tuple']['startDelete(address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(AlgoDidParamsFactory.startDelete(params))
    },

    /**
     * Makes a call to the AlgoDID smart contract using the `deleteData(address,uint64)void` ABI method.
     *
     * Deletes a box of data
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    deleteData: (params: CallParams<AlgoDidArgs['obj']['deleteData(address,uint64)void'] | AlgoDidArgs['tuple']['deleteData(address,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(AlgoDidParamsFactory.deleteData(params))
    },

    /**
     * Makes a call to the AlgoDID smart contract using the `dummy()void` ABI method.
     *
    * Dummy function to add extra box references for deleteData.
    Boxes are 32k, but a single app call can only include enough references to read/write 8k
    at a time. Thus when a box is deleted, we need to add additional dummy calls with box
    references to increase the total read/write budget to 32k.

     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    dummy: (params: CallParams<AlgoDidArgs['obj']['dummy()void'] | AlgoDidArgs['tuple']['dummy()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(AlgoDidParamsFactory.dummy(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available update methods
     */
    update: {
      /**
       * Updates an existing instance of the AlgoDID smart contract using the `updateApplication()void` ABI method.
       *
       * Allow the contract to be updated by the creator
       *
       * @param params The params for the smart contract call
       * @returns The update transaction
       */
      updateApplication: (params: CallParams<AlgoDidArgs['obj']['updateApplication()void'] | AlgoDidArgs['tuple']['updateApplication()void']> & AppClientCompilationParams = {args: []}) => {
        return this.appClient.createTransaction.update(AlgoDidParamsFactory.update.updateApplication(params))
      },

    },

    /**
     * Makes a clear_state call to an existing instance of the AlgoDID smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the AlgoDID smart contract using the `startUpload(address,uint64,uint64,pay)void` ABI method.
     *
     * Allocate boxes to begin data upload process
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    startUpload: (params: CallParams<AlgoDidArgs['obj']['startUpload(address,uint64,uint64,pay)void'] | AlgoDidArgs['tuple']['startUpload(address,uint64,uint64,pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(AlgoDidParamsFactory.startUpload(params))
    },

    /**
     * Makes a call to the AlgoDID smart contract using the `upload(address,uint64,uint64,byte[])void` ABI method.
     *
     * Upload data to a specific offset in a box
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    upload: (params: CallParams<AlgoDidArgs['obj']['upload(address,uint64,uint64,byte[])void'] | AlgoDidArgs['tuple']['upload(address,uint64,uint64,byte[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(AlgoDidParamsFactory.upload(params))
    },

    /**
     * Makes a call to the AlgoDID smart contract using the `finishUpload(address)void` ABI method.
     *
     * Mark uploading as false
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    finishUpload: (params: CallParams<AlgoDidArgs['obj']['finishUpload(address)void'] | AlgoDidArgs['tuple']['finishUpload(address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(AlgoDidParamsFactory.finishUpload(params))
    },

    /**
     * Makes a call to the AlgoDID smart contract using the `startDelete(address)void` ABI method.
     *
     * Starts the deletion process for the data associated with a DID
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    startDelete: (params: CallParams<AlgoDidArgs['obj']['startDelete(address)void'] | AlgoDidArgs['tuple']['startDelete(address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(AlgoDidParamsFactory.startDelete(params))
    },

    /**
     * Makes a call to the AlgoDID smart contract using the `deleteData(address,uint64)void` ABI method.
     *
     * Deletes a box of data
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    deleteData: (params: CallParams<AlgoDidArgs['obj']['deleteData(address,uint64)void'] | AlgoDidArgs['tuple']['deleteData(address,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(AlgoDidParamsFactory.deleteData(params))
    },

    /**
     * Makes a call to the AlgoDID smart contract using the `dummy()void` ABI method.
     *
    * Dummy function to add extra box references for deleteData.
    Boxes are 32k, but a single app call can only include enough references to read/write 8k
    at a time. Thus when a box is deleted, we need to add additional dummy calls with box
    references to increase the total read/write budget to 32k.

     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    dummy: (params: CallParams<AlgoDidArgs['obj']['dummy()void'] | AlgoDidArgs['tuple']['dummy()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(AlgoDidParamsFactory.dummy(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available update methods
     */
    update: {
      /**
       * Updates an existing instance of the AlgoDID smart contract using the `updateApplication()void` ABI method.
       *
       * Allow the contract to be updated by the creator
       *
       * @param params The params for the smart contract call
       * @returns The update result
       */
      updateApplication: async (params: CallParams<AlgoDidArgs['obj']['updateApplication()void'] | AlgoDidArgs['tuple']['updateApplication()void']> & AppClientCompilationParams & SendParams = {args: []}) => {
        const result = await this.appClient.send.update(AlgoDidParamsFactory.update.updateApplication(params))
        return {...result, return: result.return as unknown as (undefined | AlgoDidReturns['updateApplication()void'])}
      },

    },

    /**
     * Makes a clear_state call to an existing instance of the AlgoDID smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the AlgoDID smart contract using the `startUpload(address,uint64,uint64,pay)void` ABI method.
     *
     * Allocate boxes to begin data upload process
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    startUpload: async (params: CallParams<AlgoDidArgs['obj']['startUpload(address,uint64,uint64,pay)void'] | AlgoDidArgs['tuple']['startUpload(address,uint64,uint64,pay)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(AlgoDidParamsFactory.startUpload(params))
      return {...result, return: result.return as unknown as (undefined | AlgoDidReturns['startUpload(address,uint64,uint64,pay)void'])}
    },

    /**
     * Makes a call to the AlgoDID smart contract using the `upload(address,uint64,uint64,byte[])void` ABI method.
     *
     * Upload data to a specific offset in a box
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    upload: async (params: CallParams<AlgoDidArgs['obj']['upload(address,uint64,uint64,byte[])void'] | AlgoDidArgs['tuple']['upload(address,uint64,uint64,byte[])void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(AlgoDidParamsFactory.upload(params))
      return {...result, return: result.return as unknown as (undefined | AlgoDidReturns['upload(address,uint64,uint64,byte[])void'])}
    },

    /**
     * Makes a call to the AlgoDID smart contract using the `finishUpload(address)void` ABI method.
     *
     * Mark uploading as false
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    finishUpload: async (params: CallParams<AlgoDidArgs['obj']['finishUpload(address)void'] | AlgoDidArgs['tuple']['finishUpload(address)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(AlgoDidParamsFactory.finishUpload(params))
      return {...result, return: result.return as unknown as (undefined | AlgoDidReturns['finishUpload(address)void'])}
    },

    /**
     * Makes a call to the AlgoDID smart contract using the `startDelete(address)void` ABI method.
     *
     * Starts the deletion process for the data associated with a DID
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    startDelete: async (params: CallParams<AlgoDidArgs['obj']['startDelete(address)void'] | AlgoDidArgs['tuple']['startDelete(address)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(AlgoDidParamsFactory.startDelete(params))
      return {...result, return: result.return as unknown as (undefined | AlgoDidReturns['startDelete(address)void'])}
    },

    /**
     * Makes a call to the AlgoDID smart contract using the `deleteData(address,uint64)void` ABI method.
     *
     * Deletes a box of data
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    deleteData: async (params: CallParams<AlgoDidArgs['obj']['deleteData(address,uint64)void'] | AlgoDidArgs['tuple']['deleteData(address,uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(AlgoDidParamsFactory.deleteData(params))
      return {...result, return: result.return as unknown as (undefined | AlgoDidReturns['deleteData(address,uint64)void'])}
    },

    /**
     * Makes a call to the AlgoDID smart contract using the `dummy()void` ABI method.
     *
    * Dummy function to add extra box references for deleteData.
    Boxes are 32k, but a single app call can only include enough references to read/write 8k
    at a time. Thus when a box is deleted, we need to add additional dummy calls with box
    references to increase the total read/write budget to 32k.

     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    dummy: async (params: CallParams<AlgoDidArgs['obj']['dummy()void'] | AlgoDidArgs['tuple']['dummy()void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(AlgoDidParamsFactory.dummy(params))
      return {...result, return: result.return as unknown as (undefined | AlgoDidReturns['dummy()void'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new AlgoDidClient(this.appClient.clone(params))
  }

  /**
   * Methods to access state for the current AlgoDID app
   */
  state = {
    /**
     * Methods to access global state for the current AlgoDID app
     */
    global: {
      /**
       * Get all current keyed values from global state
       */
      getAll: async (): Promise<Partial<Expand<GlobalKeysState>>> => {
        const result = await this.appClient.state.global.getAll()
        return {
          currentIndex: result.currentIndex,
        }
      },
      /**
       * Get the current value of the currentIndex key in global state
       */
      currentIndex: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("currentIndex")) as bigint | undefined },
    },
    /**
     * Methods to access box state for the current AlgoDID app
     */
    box: {
      /**
       * Get all current keyed values from box state
       */
      getAll: async (): Promise<Partial<Expand<BoxKeysState>>> => {
        const result = await this.appClient.state.box.getAll()
        return {
        }
      },
      /**
       * Get values from the dataBoxes map in box state
       */
      dataBoxes: {
        /**
         * Get all current values of the dataBoxes map in box state
         */
        getMap: async (): Promise<Map<bigint, Uint8Array>> => { return (await this.appClient.state.box.getMap("dataBoxes")) as Map<bigint, Uint8Array> },
        /**
         * Get a current value of the dataBoxes map by key from box state
         */
        value: async (key: bigint | number): Promise<Uint8Array | undefined> => { return await this.appClient.state.box.getMapValue("dataBoxes", key) as Uint8Array | undefined },
      },
      /**
       * Get values from the metadata map in box state
       */
      metadata: {
        /**
         * Get all current values of the metadata map in box state
         */
        getMap: async (): Promise<Map<string, Metadata>> => { return (await this.appClient.state.box.getMap("metadata")) as Map<string, Metadata> },
        /**
         * Get a current value of the metadata map by key from box state
         */
        value: async (key: string): Promise<Metadata | undefined> => { return await this.appClient.state.box.getMapValue("metadata", key) as Metadata | undefined },
      },
    },
  }

  public newGroup(): AlgoDidComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a startUpload(address,uint64,uint64,pay)void method call against the AlgoDID contract
       */
      startUpload(params: CallParams<AlgoDidArgs['obj']['startUpload(address,uint64,uint64,pay)void'] | AlgoDidArgs['tuple']['startUpload(address,uint64,uint64,pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.startUpload(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a upload(address,uint64,uint64,byte[])void method call against the AlgoDID contract
       */
      upload(params: CallParams<AlgoDidArgs['obj']['upload(address,uint64,uint64,byte[])void'] | AlgoDidArgs['tuple']['upload(address,uint64,uint64,byte[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.upload(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a finishUpload(address)void method call against the AlgoDID contract
       */
      finishUpload(params: CallParams<AlgoDidArgs['obj']['finishUpload(address)void'] | AlgoDidArgs['tuple']['finishUpload(address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.finishUpload(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a startDelete(address)void method call against the AlgoDID contract
       */
      startDelete(params: CallParams<AlgoDidArgs['obj']['startDelete(address)void'] | AlgoDidArgs['tuple']['startDelete(address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.startDelete(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a deleteData(address,uint64)void method call against the AlgoDID contract
       */
      deleteData(params: CallParams<AlgoDidArgs['obj']['deleteData(address,uint64)void'] | AlgoDidArgs['tuple']['deleteData(address,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.deleteData(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a dummy()void method call against the AlgoDID contract
       */
      dummy(params: CallParams<AlgoDidArgs['obj']['dummy()void'] | AlgoDidArgs['tuple']['dummy()void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.dummy(params)))
        resultMappers.push(undefined)
        return this
      },
      get update() {
        return {
          updateApplication: (params: CallParams<AlgoDidArgs['obj']['updateApplication()void'] | AlgoDidArgs['tuple']['updateApplication()void']> & AppClientCompilationParams) => {
            promiseChain = promiseChain.then(async () => composer.addAppUpdateMethodCall(await client.params.update.updateApplication(params)))
            resultMappers.push(undefined)
            return this
          },
        }
      },
      /**
       * Add a clear state call to the AlgoDID contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as AlgoDidComposer
  }
}
export type AlgoDidComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the startUpload(address,uint64,uint64,pay)void ABI method.
   *
   * Allocate boxes to begin data upload process
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  startUpload(params?: CallParams<AlgoDidArgs['obj']['startUpload(address,uint64,uint64,pay)void'] | AlgoDidArgs['tuple']['startUpload(address,uint64,uint64,pay)void']>): AlgoDidComposer<[...TReturns, AlgoDidReturns['startUpload(address,uint64,uint64,pay)void'] | undefined]>

  /**
   * Calls the upload(address,uint64,uint64,byte[])void ABI method.
   *
   * Upload data to a specific offset in a box
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  upload(params?: CallParams<AlgoDidArgs['obj']['upload(address,uint64,uint64,byte[])void'] | AlgoDidArgs['tuple']['upload(address,uint64,uint64,byte[])void']>): AlgoDidComposer<[...TReturns, AlgoDidReturns['upload(address,uint64,uint64,byte[])void'] | undefined]>

  /**
   * Calls the finishUpload(address)void ABI method.
   *
   * Mark uploading as false
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  finishUpload(params?: CallParams<AlgoDidArgs['obj']['finishUpload(address)void'] | AlgoDidArgs['tuple']['finishUpload(address)void']>): AlgoDidComposer<[...TReturns, AlgoDidReturns['finishUpload(address)void'] | undefined]>

  /**
   * Calls the startDelete(address)void ABI method.
   *
   * Starts the deletion process for the data associated with a DID
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  startDelete(params?: CallParams<AlgoDidArgs['obj']['startDelete(address)void'] | AlgoDidArgs['tuple']['startDelete(address)void']>): AlgoDidComposer<[...TReturns, AlgoDidReturns['startDelete(address)void'] | undefined]>

  /**
   * Calls the deleteData(address,uint64)void ABI method.
   *
   * Deletes a box of data
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  deleteData(params?: CallParams<AlgoDidArgs['obj']['deleteData(address,uint64)void'] | AlgoDidArgs['tuple']['deleteData(address,uint64)void']>): AlgoDidComposer<[...TReturns, AlgoDidReturns['deleteData(address,uint64)void'] | undefined]>

  /**
   * Calls the dummy()void ABI method.
   *
  * Dummy function to add extra box references for deleteData.
  Boxes are 32k, but a single app call can only include enough references to read/write 8k
  at a time. Thus when a box is deleted, we need to add additional dummy calls with box
  references to increase the total read/write budget to 32k.

   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  dummy(params?: CallParams<AlgoDidArgs['obj']['dummy()void'] | AlgoDidArgs['tuple']['dummy()void']>): AlgoDidComposer<[...TReturns, AlgoDidReturns['dummy()void'] | undefined]>

  /**
   * Gets available update methods
   */
  readonly update: {
    /**
     * Updates an existing instance of the AlgoDID smart contract using the updateApplication()void ABI method.
     *
     * @param args The arguments for the smart contract call
     * @param params Any additional parameters for the call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    updateApplication(params?: CallParams<AlgoDidArgs['obj']['updateApplication()void'] | AlgoDidArgs['tuple']['updateApplication()void']>): AlgoDidComposer<[...TReturns, AlgoDidReturns['updateApplication()void'] | undefined]>
  }

  /**
   * Makes a clear_state call to an existing instance of the AlgoDID smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): AlgoDidComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): AlgoDidComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): Promise<TransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<AlgoDidComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<AlgoDidComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<AlgoDidComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<AlgoDidComposerResults<TReturns>>
}
export type AlgoDidComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>

